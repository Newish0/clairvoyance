// Generated by pydantic-to-zod-converter
// From Pydantic models in Python module: models (path: models)
// Timestamp: 2025-05-27T20:14:30.773191

import { z } from 'zod';

// Note: `PydanticObjectId` (from beanie.odm.fields) is mapped to `z.string()`. 
// If you prefer a branded type for ObjectId for more type safety in TypeScript:
// export type ObjectIdString = z.BRAND<string, "ObjectIdString">;
// const objectIdRegex = /^[0-9a-fA-F]{24}$/; // Example regex for ObjectId
// export const ZodObjectId = z.string().regex(objectIdRegex).brand<"ObjectIdString">();
// You would then manually change relevant `z.string()` to `ZodObjectId` for ObjectId fields.



export enum AlertCause {
  UNKNOWN_CAUSE = 1,
  OTHER_CAUSE = 2,
  TECHNICAL_PROBLEM = 3,
  STRIKE = 4,
  DEMONSTRATION = 5,
  ACCIDENT = 6,
  HOLIDAY = 7,
  WEATHER = 8,
  MAINTENANCE = 9,
  CONSTRUCTION = 10,
  POLICE_ACTIVITY = 11,
  MEDICAL_EMERGENCY = 12,
}

export const AlertCauseSchema = z.nativeEnum(AlertCause);

export type AlertCauseType = z.infer<typeof AlertCauseSchema>;

export enum AlertEffect {
  NO_SERVICE = 1,
  REDUCED_SERVICE = 2,
  SIGNIFICANT_DELAYS = 3,
  DETOUR = 4,
  ADDITIONAL_SERVICE = 5,
  MODIFIED_SERVICE = 6,
  OTHER_EFFECT = 7,
  UNKNOWN_EFFECT = 8,
  STOP_MOVED = 9,
  NO_EFFECT = 10,
  ACCESSIBILITY_ISSUE = 11,
}

export const AlertEffectSchema = z.nativeEnum(AlertEffect);

export type AlertEffectType = z.infer<typeof AlertEffectSchema>;

export enum AlertSeverityLevel {
  UNKNOWN_SEVERITY = 1,
  INFO = 2,
  WARNING = 3,
  SEVERE = 4,
}

export const AlertSeverityLevelSchema = z.nativeEnum(AlertSeverityLevel);

export type AlertSeverityLevelType = z.infer<typeof AlertSeverityLevelSchema>;

export enum AttributionRole {
  NO_ROLE = 0,
  HAS_ROLE = 1,
}

export const AttributionRoleSchema = z.nativeEnum(AttributionRole);

export type AttributionRoleType = z.infer<typeof AttributionRoleSchema>;

export enum BikesAllowed {
  NO_INFO = 0,
  ALLOWED = 1,
  NOT_ALLOWED = 2,
}

export const BikesAllowedSchema = z.nativeEnum(BikesAllowed);

export type BikesAllowedType = z.infer<typeof BikesAllowedSchema>;

export enum BookingType {
  REAL_TIME = 0,
  SAME_DAY_ADVANCE = 1,
  PRIOR_DAYS_ADVANCE = 2,
}

export const BookingTypeSchema = z.nativeEnum(BookingType);

export type BookingTypeType = z.infer<typeof BookingTypeSchema>;

export enum CalendarAvailability {
  NOT_AVAILABLE = 0,
  AVAILABLE = 1,
}

export const CalendarAvailabilitySchema = z.nativeEnum(CalendarAvailability);

export type CalendarAvailabilityType = z.infer<typeof CalendarAvailabilitySchema>;

export enum CalendarExceptionType {
  ADDED = 1,
  REMOVED = 2,
}

export const CalendarExceptionTypeSchema = z.nativeEnum(CalendarExceptionType);

export type CalendarExceptionTypeType = z.infer<typeof CalendarExceptionTypeSchema>;

export enum CongestionLevel {
  UNKNOWN_CONGESTION_LEVEL = 0,
  RUNNING_SMOOTHLY = 1,
  STOP_AND_GO = 2,
  CONGESTION = 3,
  SEVERE_CONGESTION = 4,
}

export const CongestionLevelSchema = z.nativeEnum(CongestionLevel);

export type CongestionLevelType = z.infer<typeof CongestionLevelSchema>;

export enum ContinuousPickupDropOff {
  CONTINUOUS = 0,
  NONE = 1,
  PHONE_AGENCY = 2,
  COORDINATE_WITH_DRIVER = 3,
}

export const ContinuousPickupDropOffSchema = z.nativeEnum(ContinuousPickupDropOff);

export type ContinuousPickupDropOffType = z.infer<typeof ContinuousPickupDropOffSchema>;

export enum DirectionId {
  DIRECTION_0 = 0,
  DIRECTION_1 = 1,
}

export const DirectionIdSchema = z.nativeEnum(DirectionId);

export type DirectionIdType = z.infer<typeof DirectionIdSchema>;

export enum DynamicStopWheelchairBoarding {
  UNKNOWN = 0,
  AVAILABLE = 1,
  NOT_AVAILABLE = 2,
}

export const DynamicStopWheelchairBoardingSchema = z.nativeEnum(DynamicStopWheelchairBoarding);

export type DynamicStopWheelchairBoardingType = z.infer<typeof DynamicStopWheelchairBoardingSchema>;

export enum FareMediaType {
  NONE = 0,
  PAPER_TICKET = 1,
  TRANSIT_CARD = 2,
  CEMV = 3,
  MOBILE_APP = 4,
}

export const FareMediaTypeSchema = z.nativeEnum(FareMediaType);

export type FareMediaTypeType = z.infer<typeof FareMediaTypeSchema>;

export enum FarePaymentMethod {
  ON_BOARD = 0,
  BEFORE_BOARDING = 1,
}

export const FarePaymentMethodSchema = z.nativeEnum(FarePaymentMethod);

export type FarePaymentMethodType = z.infer<typeof FarePaymentMethodSchema>;

export enum FareTransferCount {
  NO_TRANSFERS = 0,
  ONE_TRANSFER = 1,
  TWO_TRANSFERS = 2,
}

export const FareTransferCountSchema = z.nativeEnum(FareTransferCount);

export type FareTransferCountType = z.infer<typeof FareTransferCountSchema>;

export enum FareTransferDurationLimitType {
  DEPARTURE_TO_ARRIVAL = 0,
  DEPARTURE_TO_DEPARTURE = 1,
  ARRIVAL_TO_DEPARTURE = 2,
  ARRIVAL_TO_ARRIVAL = 3,
}

export const FareTransferDurationLimitTypeSchema = z.nativeEnum(FareTransferDurationLimitType);

export type FareTransferDurationLimitTypeType = z.infer<typeof FareTransferDurationLimitTypeSchema>;

export enum FareTransferType {
  FROM_LEG_PLUS_TRANSFER_COST = 0,
  FROM_LEG_PLUS_TRANSFER_PLUS_TO_LEG = 1,
  TRANSFER_COST_ONLY = 2,
}

export const FareTransferTypeSchema = z.nativeEnum(FareTransferType);

export type FareTransferTypeType = z.infer<typeof FareTransferTypeSchema>;

export enum Incrementality {
  FULL_DATASET = 0,
  DIFFERENTIAL = 1,
}

export const IncrementalitySchema = z.nativeEnum(Incrementality);

export type IncrementalityType = z.infer<typeof IncrementalitySchema>;

export enum IntEnum {

}

export const IntEnumSchema = z.nativeEnum(IntEnum);

export type IntEnumType = z.infer<typeof IntEnumSchema>;

export enum LocationType {
  STOP = 0,
  STATION = 1,
  ENTRANCE_EXIT = 2,
  GENERIC_NODE = 3,
  BOARDING_AREA = 4,
}

export const LocationTypeSchema = z.nativeEnum(LocationType);

export type LocationTypeType = z.infer<typeof LocationTypeSchema>;

export enum OccupancyStatus {
  EMPTY = 0,
  MANY_SEATS_AVAILABLE = 1,
  FEW_SEATS_AVAILABLE = 2,
  STANDING_ROOM_ONLY = 3,
  CRUSHED_STANDING_ROOM_ONLY = 4,
  FULL = 5,
  NOT_ACCEPTING_PASSENGERS = 6,
  NO_DATA_AVAILABLE = 7,
  NOT_BOARDABLE = 8,
}

export const OccupancyStatusSchema = z.nativeEnum(OccupancyStatus);

export type OccupancyStatusType = z.infer<typeof OccupancyStatusSchema>;

export enum PathwayBidirectional {
  UNIDIRECTIONAL = 0,
  BIDIRECTIONAL = 1,
}

export const PathwayBidirectionalSchema = z.nativeEnum(PathwayBidirectional);

export type PathwayBidirectionalType = z.infer<typeof PathwayBidirectionalSchema>;

export enum PathwayMode {
  WALKWAY = 1,
  STAIRS = 2,
  MOVING_SIDEWALK = 3,
  ESCALATOR = 4,
  ELEVATOR = 5,
  FARE_GATE = 6,
  EXIT_GATE = 7,
}

export const PathwayModeSchema = z.nativeEnum(PathwayMode);

export type PathwayModeType = z.infer<typeof PathwayModeSchema>;

export enum PickupDropOffType {
  REGULARLY_SCHEDULED = 0,
  NO_SERVICE_AVAILABLE = 1,
  PHONE_AGENCY = 2,
  COORDINATE_WITH_DRIVER = 3,
}

export const PickupDropOffTypeSchema = z.nativeEnum(PickupDropOffType);

export type PickupDropOffTypeType = z.infer<typeof PickupDropOffTypeSchema>;

export enum RiderCategoryDefault {
  NOT_DEFAULT = 0,
  IS_DEFAULT = 1,
}

export const RiderCategoryDefaultSchema = z.nativeEnum(RiderCategoryDefault);

export type RiderCategoryDefaultType = z.infer<typeof RiderCategoryDefaultSchema>;

export enum RouteType {
  TRAM = 0,
  SUBWAY = 1,
  RAIL = 2,
  BUS = 3,
  FERRY = 4,
  CABLE_TRAM = 5,
  AERIAL_LIFT = 6,
  FUNICULAR = 7,
  TROLLEYBUS = 11,
  MONORAIL = 12,
}

export const RouteTypeSchema = z.nativeEnum(RouteType);

export type RouteTypeType = z.infer<typeof RouteTypeSchema>;

export enum StopTimeUpdateScheduleRelationship {
  SCHEDULED = 0,
  SKIPPED = 1,
  NO_DATA = 2,
  UNSCHEDULED = 3,
}

export const StopTimeUpdateScheduleRelationshipSchema = z.nativeEnum(StopTimeUpdateScheduleRelationship);

export type StopTimeUpdateScheduleRelationshipType = z.infer<typeof StopTimeUpdateScheduleRelationshipSchema>;

export enum Timepoint {
  APPROXIMATE = 0,
  EXACT = 1,
}

export const TimepointSchema = z.nativeEnum(Timepoint);

export type TimepointType = z.infer<typeof TimepointSchema>;

export enum TripDescriptorScheduleRelationship {
  SCHEDULED = 0,
  ADDED = 1,
  UNSCHEDULED = 2,
  CANCELED = 3,
  DUPLICATED = 4,
  DELETED = 5,
}

export const TripDescriptorScheduleRelationshipSchema = z.nativeEnum(TripDescriptorScheduleRelationship);

export type TripDescriptorScheduleRelationshipType = z.infer<typeof TripDescriptorScheduleRelationshipSchema>;

export enum TripWheelchairAccessibility {
  NO_INFO = 0,
  ACCESSIBLE = 1,
  NOT_ACCESSIBLE = 2,
}

export const TripWheelchairAccessibilitySchema = z.nativeEnum(TripWheelchairAccessibility);

export type TripWheelchairAccessibilityType = z.infer<typeof TripWheelchairAccessibilitySchema>;

export enum VehicleStopStatus {
  INCOMING_AT = 0,
  STOPPED_AT = 1,
  IN_TRANSIT_TO = 2,
}

export const VehicleStopStatusSchema = z.nativeEnum(VehicleStopStatus);

export type VehicleStopStatusType = z.infer<typeof VehicleStopStatusSchema>;

export enum VehicleWheelchairAccessible {
  NO_VALUE = 0,
  UNKNOWN = 1,
  WHEELCHAIR_ACCESSIBLE = 2,
  WHEELCHAIR_INACCESSIBLE = 3,
}

export const VehicleWheelchairAccessibleSchema = z.nativeEnum(VehicleWheelchairAccessible);

export type VehicleWheelchairAccessibleType = z.infer<typeof VehicleWheelchairAccessibleSchema>;

export enum WheelchairBoarding {
  NO_INFO = 0,
  ACCESSIBLE = 1,
  NOT_ACCESSIBLE = 2,
}

export const WheelchairBoardingSchema = z.nativeEnum(WheelchairBoarding);

export type WheelchairBoardingType = z.infer<typeof WheelchairBoardingSchema>;

export const TripDescriptorSchema = z.object({
  trip_id: z.string().nullable().optional(),
  start_time: z.string().nullable().optional(),
  start_date: z.string().nullable().optional(),
  route_id: z.string().nullable().optional(),
  direction_id: z.number().int().nullable().optional(),
});

export type TripDescriptor = z.infer<typeof TripDescriptorSchema>;

export const EntitySelectorSchema = z.object({
  agency_id: z.string().nullable().optional(),
  route_id: z.string().nullable().optional(),
  route_type: z.number().int().nullable().optional(),
  trip: TripDescriptorSchema.nullable().optional(),
  stop_id: z.string().nullable().optional(),
  direction_id: z.number().int().nullable().optional(),
});

export type EntitySelector = z.infer<typeof EntitySelectorSchema>;

export const TimeRangeSchema = z.object({
  start: z.date().nullable().optional(),
  end: z.date().nullable().optional(),
});

export type TimeRange = z.infer<typeof TimeRangeSchema>;

export const TranslationSchema = z.object({
  text: z.string(),
  language: z.string(),
});

export type Translation = z.infer<typeof TranslationSchema>;

export const AlertSchema = z.object({
  _id: z.string().nullable().optional(),
  revision_id: z.string().uuid().nullable().optional(),
  producer_alert_id: z.string().nullable().optional(),
  agency_id: z.string(),
  active_periods: z.array(TimeRangeSchema).optional().nullable(),
  informed_entities: z.array(EntitySelectorSchema).optional().nullable(),
  cause: AlertCauseSchema.optional().nullable(),
  effect: AlertEffectSchema.optional().nullable(),
  url: z.array(TranslationSchema).nullable().optional(),
  header_text: z.array(TranslationSchema).nullable().optional(),
  description_text: z.array(TranslationSchema).nullable().optional(),
  severity_level: AlertSeverityLevelSchema.nullable().optional(),
  created_at: z.date().optional().nullable(),
  updated_at: z.date().optional().nullable(),
});

export type Alert = z.infer<typeof AlertSchema>;

export const DocumentSchema = z.object({
  _id: z.string().nullable().optional(),
  revision_id: z.string().uuid().nullable().optional(),
});

export type Document = z.infer<typeof DocumentSchema>;

export const LineStringGeometrySchema = z.object({
  type: z.string().optional().nullable(),
  coordinates: z.array(z.array(z.number())),
});

export type LineStringGeometry = z.infer<typeof LineStringGeometrySchema>;

export const PointGeometrySchema = z.object({
  type: z.string().optional().nullable(),
  coordinates: z.array(z.number()),
});

export type PointGeometry = z.infer<typeof PointGeometrySchema>;

export const PositionSchema = z.object({
  latitude: z.number(),
  longitude: z.number(),
  timestamp: z.date(),
  bearing: z.number().nullable().optional(),
  speed: z.number().nullable().optional(),
});

export type Position = z.infer<typeof PositionSchema>;

export const RouteSchema = z.object({
  _id: z.string().nullable().optional(),
  revision_id: z.string().uuid().nullable().optional(),
  route_id: z.string(),
  agency_id: z.string().nullable().optional(),
  route_short_name: z.string().nullable().optional(),
  route_long_name: z.string().nullable().optional(),
  route_desc: z.string().nullable().optional(),
  route_type: RouteTypeSchema,
  route_url: z.string().nullable().optional(),
  route_color: z.string().nullable().optional(),
  route_text_color: z.string().nullable().optional(),
  route_sort_order: z.number().int().nullable().optional(),
  continuous_pickup: ContinuousPickupDropOffSchema.nullable().optional(),
  continuous_drop_off: ContinuousPickupDropOffSchema.nullable().optional(),
});

export type Route = z.infer<typeof RouteSchema>;

export const StopTimeInfoSchema = z.object({
  stop_id: z.string(),
  stop_sequence: z.number().int(),
  stop_headsign: z.string().nullable().optional(),
  pickup_type: z.number().int().nullable().optional(),
  drop_off_type: z.number().int().nullable().optional(),
  shape_dist_traveled: z.number().nullable().optional(),
  arrival_datetime: z.date(),
  departure_datetime: z.date(),
  schedule_relationship: StopTimeUpdateScheduleRelationshipSchema.nullable().optional(),
  predicted_arrival_datetime: z.date().nullable().optional(),
  predicted_departure_datetime: z.date().nullable().optional(),
  predicted_arrival_uncertainty: z.number().int().nullable().optional(),
  predicted_departure_uncertainty: z.number().int().nullable().optional(),
  arrival_delay: z.number().int().nullable().optional(),
  departure_delay: z.number().int().nullable().optional(),
});

export type StopTimeInfo = z.infer<typeof StopTimeInfoSchema>;

export const TripVehicleHistorySchema = z.object({
  timestamp: z.date(),
  position: PositionSchema,
  congestion_level: CongestionLevelSchema.nullable(),
  occupancy_status: OccupancyStatusSchema.nullable(),
});

export type TripVehicleHistory = z.infer<typeof TripVehicleHistorySchema>;

export const VehicleSchema = z.object({
  vehicle_id: z.string().nullable().optional(),
  label: z.string().nullable().optional(),
  license_plate: z.string().nullable().optional(),
  wheelchair_accessible: VehicleWheelchairAccessibleSchema.nullable().optional(),
});

export type Vehicle = z.infer<typeof VehicleSchema>;

export const ScheduledTripDocumentSchema = z.object({
  _id: z.string().nullable().optional(),
  revision_id: z.string().uuid().nullable().optional(),
  trip_id: z.string(),
  start_date: z.string(),
  start_time: z.string(),
  route_id: z.string(),
  service_id: z.string(),
  route_short_name: z.string().nullable().optional(),
  agency_timezone_str: z.string().optional().nullable(),
  direction_id: z.number().int().nullable().optional(),
  shape_id: z.string().nullable().optional(),
  trip_headsign: z.string().nullable().optional(),
  trip_short_name: z.string().nullable().optional(),
  block_id: z.string().nullable().optional(),
  stop_times: z.array(StopTimeInfoSchema).optional().nullable(),
  current_stop_sequence: z.number().int().nullable().optional(),
  current_status: VehicleStopStatusSchema.nullable().optional(),
  schedule_relationship: TripDescriptorScheduleRelationshipSchema.optional().nullable(),
  vehicle: VehicleSchema.nullable().optional(),
  current_occupancy: OccupancyStatusSchema.nullable().optional(),
  current_congestion: CongestionLevelSchema.nullable().optional(),
  current_position: PositionSchema.nullable().optional(),
  history: z.array(TripVehicleHistorySchema).optional().nullable(),
  stop_times_updated_at: z.date().nullable().optional(),
  position_updated_at: z.date().nullable().optional(),
  start_datetime: z.date(),
});

export type ScheduledTripDocument = z.infer<typeof ScheduledTripDocumentSchema>;

export const ShapeSchema = z.object({
  _id: z.string().nullable().optional(),
  revision_id: z.string().uuid().nullable().optional(),
  shape_id: z.string(),
  geometry: LineStringGeometrySchema,
  distances_traveled: z.array(z.number().nullable()).nullable().optional(),
});

export type Shape = z.infer<typeof ShapeSchema>;

export const StopSchema = z.object({
  _id: z.string().nullable().optional(),
  revision_id: z.string().uuid().nullable().optional(),
  stop_id: z.string(),
  stop_code: z.string().nullable().optional(),
  stop_name: z.string().nullable().optional(),
  stop_desc: z.string().nullable().optional(),
  location: PointGeometrySchema.nullable().optional(),
  zone_id: z.string().nullable().optional(),
  stop_url: z.string().nullable().optional(),
  location_type: LocationTypeSchema.nullable().optional(),
  parent_station_id: z.string().nullable().optional(),
  stop_timezone: z.string().nullable().optional(),
  wheelchair_boarding: WheelchairBoardingSchema.nullable().optional(),
  level_id: z.string().nullable().optional(),
  platform_code: z.string().nullable().optional(),
});

export type Stop = z.infer<typeof StopSchema>;