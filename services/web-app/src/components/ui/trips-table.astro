---
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import RealTimeIndicator from "@/components/ui/realtime-indicator.tsx";
import { Clock, MapPin } from "lucide-solid";
import { format } from "date-fns/format";
import TripTime from "./departure-time";
import { addSeconds } from "date-fns";
import type { ScheduledTripDocumentWithStopName } from "~/services/dtos";

interface Props {
    trips: ScheduledTripDocumentWithStopName[];
}
const { trips } = Astro.props;

// Get all stops and sort them by sequence
const allStops = new Map(
    trips
        .flatMap(
            (trip) =>
                trip.stop_times?.map(
                    (st) =>
                        [
                            st.stop_id,
                            {
                                sequence: st.stop_sequence,
                                name: st.stop_name,
                            },
                        ] as const
                ) || []
        )
        .toSorted((a, b) => a[1].sequence - b[1].sequence)
);

const getStopTime = (trip: ScheduledTripDocumentWithStopName, stopId: string) => {
    return trip.stop_times?.find((st) => st.stop_id === stopId);
};
---

<div class="w-full">
    <!-- Desktop Table Layout -->
    <div class="overflow-x-auto">
        <!-- Add a unique ID for the client-side script to target -->
        <Table class="trips-table">
            <TableHeader>
                <TableRow class="sticky top-0 z-10">
                    <TableHead class="w-48 sticky left-0 z-10">Stop</TableHead>

                    {
                        trips.map((trip) => (
                            <TableHead class="text-center min-w-28">
                                <div class="space-y-1">
                                    <Badge variant="outline" class="text-xs">
                                        {trip.route_short_name || trip.route_id}
                                    </Badge>
                                    <div class="text-xs text-muted-foreground font-normal">
                                        {trip.trip_headsign || "Trip " + trip.trip_id.slice(-4)}
                                    </div>
                                </div>
                            </TableHead>
                        ))
                    }
                </TableRow>
            </TableHeader>
            <TableBody>
                {
                    allStops
                        .entries()
                        .toArray()
                        .map(([stopId, { name: stopName }]) => (
                            <TableRow
                                class={
                                    "cursor-pointer transition-colors bg-background hover:bg-muted"
                                }
                                data-stop-id={stopId}
                            >
                                <TableCell class="font-medium sticky left-0 z-10 bg-inherit">
                                    <div class="flex items-center gap-2">
                                        <MapPin class="h-4 w-4 text-muted-foreground flex-shrink-0" />
                                        <div>
                                            <div class="font-medium">{stopName}</div>
                                            <div class="text-xs font-thin text-muted-foreground">
                                                Stop ID: {stopId}
                                            </div>
                                        </div>
                                    </div>
                                </TableCell>
                                {trips.map((trip) => {
                                    const stopTime = getStopTime(trip, stopId);
                                    if (!stopTime) {
                                        return (
                                            <TableCell class="text-center bg-inherit">
                                                <span class="text-muted-foreground">â€”</span>
                                            </TableCell>
                                        );
                                    }

                                    const hasRealTime =
                                        stopTime.predicted_arrival_datetime ||
                                        stopTime.arrival_delay !== null;
                                    const delay = stopTime.arrival_delay || 0;
                                    const predictedTime =
                                        stopTime.predicted_arrival_datetime ??
                                        addSeconds(stopTime.arrival_datetime, delay);

                                    return (
                                        <TableCell class="text-center bg-inherit">
                                            <div class="relative inline-block">
                                                {hasRealTime ? (
                                                    <div class="mx-4 my-1">
                                                        <div>
                                                            <TripTime datetime={predictedTime} />
                                                        </div>
                                                        <div class="text-xs text-muted-foreground line-through">
                                                            {format(stopTime.arrival_datetime, "p")}
                                                        </div>
                                                    </div>
                                                ) : (
                                                    <div class="flex items-center justify-center gap-1">
                                                        <Clock class="h-3 w-3 text-muted-foreground" />
                                                        {format(stopTime.arrival_datetime, "p")}
                                                    </div>
                                                )}
                                                {hasRealTime && (
                                                    <div class="absolute -top-3 -right-3 m-2">
                                                        <RealTimeIndicator
                                                            delay={delay}
                                                            client:visible
                                                        />
                                                    </div>
                                                )}
                                            </div>
                                        </TableCell>
                                    );
                                })}
                            </TableRow>
                        ))
                }
            </TableBody>
        </Table>
    </div>
</div>

<style>
    .selected_row {
        @apply bg-accent !important;
    }

    .selected_row td:first-child {
        @apply border-l-4 border-l-primary !important;
    }
</style>

<script>
    const rows = document.querySelectorAll(".trips-table [data-stop-id]");
    for (const row of rows) {
        row.addEventListener("click", () => {
            // Clear others
            rows.forEach((r) => r.classList.remove("selected_row"));

            const stopId = row.getAttribute("data-stop-id");
            if (stopId) {
                row.classList.add("selected_row");
                window.location.hash = stopId;
            }
        });
    }
</script>
