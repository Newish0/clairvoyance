---
export const prerender = false;

import CommonHeader from "~/components/headers/common-header.astro";
import TripDetails from "~/components/info/trip-details.tsx";
import TripMap from "~/components/maps/trip-map";
import Layout from "~/layouts/root-layout.astro";
import { Card, CardContent } from "~/components/ui/card.tsx";
import { Show } from "solid-js";
import { XIcon } from "lucide-solid";
import { buttonVariants } from "~/components/ui/button";
import { getRouteNextTripsAtStop } from "~/services/trips";
import { ModeToggle } from "~/components/dark-mode-toggle";

const routeId = Astro.url.searchParams.get("route");
const stopId = Astro.url.searchParams.get("stop");
let tripObjectId = Astro.url.searchParams.get("trip");

let altRouteId: string | null = Astro.url.searchParams.get("alt_route");
let altStopId: string | null = Astro.url.searchParams.get("alt_stop");
let altTripObjectId: string | null = Astro.url.searchParams.get("alt_trip");

const redirectUrl = new URL(Astro.url);

if (!routeId || !stopId) return Astro.redirect("/404");

// Get the next trip's id if not provided
if (!tripObjectId) {
    const nextRoutes = await getRouteNextTripsAtStop({
        routeId,
        stopId,
        limit: 1,
    });
    if (!nextRoutes.length) return Astro.redirect("/404");
    tripObjectId = nextRoutes[0]?._id;
    redirectUrl.searchParams.set("trip", tripObjectId);
}

// Get the latest tripObjectId if not provided
if (altRouteId && altStopId && !altTripObjectId) {
    const nextRoutes = await getRouteNextTripsAtStop({
        routeId: altRouteId,
        stopId: altStopId,
        limit: 1,
        excludedTripObjectIds: [tripObjectId],
    });
    if (nextRoutes.length) altTripObjectId = nextRoutes[0]?._id;
}

// If one of the alt 3 required params is missing, clear all to prevent using invalid data
if (!altRouteId || !altStopId || !altTripObjectId) {
    altRouteId = null;
    altTripObjectId = null;
    altStopId = null;
} else {
    redirectUrl.searchParams.set("alt_route", altRouteId);
    redirectUrl.searchParams.set("alt_trip", altTripObjectId);
    redirectUrl.searchParams.set("alt_stop", altStopId);
}

// Only redirect if the URL has changed
if (redirectUrl.toString() !== Astro.url.toString()) {
    return Astro.redirect(redirectUrl.toString());
}
---

<Layout>
    <Fragment slot="header">
        <CommonHeader title="Trip details" />
    </Fragment>
    <Fragment slot="body">
        <div
            class="absolute z-0 inset-0 w-[100dvw] h-[155dvh] -translate-y-[55dvh] sm:translate-y-0 sm:h-[100dvh] overflow-hidden"
        >
            <TripMap client:only="solid-js" tripObjectId={tripObjectId} stopId={stopId} />
        </div>

        <div
            class="absolute top-[40dvh] z-10 inset-x-1 md:inset-x-4 md:top-4 md:max-w-sm lg:max-w-md"
        >
            <Card class="w-full h-[75dvh] md:h-[calc(100dvh-32px)]">
                <CardContent class="flex flex-col px-4 py-2 h-full">
                    <TripDetails
                        client:only="solidjs"
                        tripObjectId={tripObjectId}
                        routeId={routeId}
                        stopId={stopId}
                        altRouteId={altRouteId}
                        altStopId={altStopId}
                    />

                    <a
                        href={import.meta.env.BASE_URL}
                        class={buttonVariants({
                            size: "sm",
                            variant: "ghost",
                            class: "absolute top-0 right-0 m-2",
                        })}
                    >
                        <XIcon />
                    </a>
                </CardContent>
            </Card>
        </div>

        <!-- Top right actions  -->
        <div class="absolute z-10 top-4 right-4">
            <ModeToggle client:only="solid-js" />
        </div>

        <Show when={import.meta.env.DEV}>
            <div class="fixed top-0 right-0 text-xs text-muted-foreground p-1 flex gap-4 z-100">
                <code>DEV MODE</code>
                <code>{routeId}</code>
                <code>{tripObjectId}</code>
                <code>{stopId}</code>
            </div>
        </Show>
    </Fragment>
</Layout>
